NOP

NULL = 0000000000000000
MANYF = FFFFFFFFFFFFFFFF

#AND with a vector to remove all but the last element
LAST_VEC_ELEMENT = FFFF

ARRAYSTART = 0000000000000100
ARRAYEND = 0000000000000100
ARRAYSIZE = 0 

SHIPPOS = 00f000f000000000
SHIPVEL = 0000000000000000
SHIP_REAL_POS = 0

FORWARD_ACCEL = 3

VISUAL_ADD = 0000000000000004
VISUAL_MAX = 0000000000000020
VISUAL_TARGET = 0
VISUAL_ANGLE = 0

SHIP_ANGLE = 0000000000000000
TURN_SPEED = 0000000000050000
ANGLE_MASK = 0000000000FF0000

SLOW_TURN_ADD = 0002000000020000
SLOW_TURN = 0000000000000000

TIMER = 0
LAST_SHOT = 0
RELOAD_TIME = 10
SHOT_TIME = 0
SHOT_LIFE = 5

#Modify the model memory
LINE_START = 1FC
LOAD 0 LINE_START
STOREOBJ 0 7

ITER:
  LOAD 0 SHIPPOS
  LOAD 1 SHIPVEL

  LOAD 2 NULL

  LOAD 7 SHIP_ANGLE
  LOAD 8 TURN_SPEED

  TESTLEFT:
    BTST F 5
    BEQ GOLEFT
  TESTUP:
    BTST F 6
    BEQ GOUP
  TESTRIGHT:
    BTST F 3
    BEQ GORIGHT
  
  TEST_TURN_LEFT:
    BTST F 0
    BEQ TURN_LEFT
  TEST_TURN_RIGHT:
    BTST F 1
    BEQ TURN_RIGHT
  
  MOVED:

  STORE 2 VISUAL_TARGET

  BRA UPDATE_VISUAL
  DONE_UPDATE_VISUAL:
  LOAD 2 VISUAL_ANGLE
  LOAD C LAST_VEC_ELEMENT
  AND VISUAL_ANGLE VISUAL_ANGLE LAST_VEC_ELEMENT
  LSLI VISUAL_ANGLE VISUAL_ANGLE 30

  #Update ship position and angle
  #Add the velocity of the ship
  ADD 0 0 1
  STORE 0 SHIPPOS
  STORE 1 SHIPVEL
  STORE 7 SHIP_ANGLE
  #Rotate the ship
  VECADD SHIP_ANGLE VISUAL_ANGLE SHIP_ANGLE
  STOREOBJ SHIP_ANGLE 1

  #Divide the actual position to get the visual position
  LOAD C LAST_VEC_ELEMENT
  LOAD 8 NULL
  ALIAS 8 FINAL_POS

  #Shift 48 bits
  LSRI 9 SHIPPOS 30
  AND 9 9 LAST_VEC_ELEMENT
  #Divide speed by 8
  LSRI 9 9 4
  #Shift back 48 bits
  LSLI 9 9 30 
  VECADD FINAL_POS FINAL_POS 9

  #Shift 32 bits
  LSRI 9 SHIPPOS 20
  AND 9 9 LAST_VEC_ELEMENT
  #Divide speed by 8
  LSRI 9 9 4
  #Shift back 32 bits
  LSLI 9 9 20 
  VECADD FINAL_POS FINAL_POS 9

  #Update the visual position
  STOREOBJ FINAL_POS 0

  STORE FINAL_POS SHIP_REAL_POS

  #Do shooting stuff
  BTST F 2
  BEQ SHOOT
  HAS_SHOT:

  BRA UPDATE_SHOT
  SHOT_UPDATE_DONE:

  #End of shooting stuff

  WAITFRAME
  WAITFRAME

  LOAD 0 TIMER
  ADDI TIMER TIMER 1
  STORE TIMER TIMER

  BRA ITER

#Movement 'subroutines'
GORIGHT:
  LOAD B SHIP_ANGLE
  LOAD C FORWARD_ACCEL
  LOAD A NULL
  LOAD E LAST_VEC_ELEMENT

  LSRI SHIP_ANGLE SHIP_ANGLE 10

  ADDI SHIP_ANGLE SHIP_ANGLE 80
  #Y add
  MULCOS 8 SHIP_ANGLE FORWARD_ACCEL
  LSLI 8 8 20
  VECADD A A 8

  #X add
  ADDI SHIP_ANGLE SHIP_ANGLE 40
  MULCOS 8 SHIP_ANGLE FORWARD_ACCEL
  LSLI 8 8 30
  VECADD A A 8

  #Visual turning
  LOAD E VISUAL_MAX
  SUB 2 2 E
  
  VECSUB 1 1 A
  BRA TEST_TURN_LEFT
GOLEFT:
  LOAD B SHIP_ANGLE
  LOAD C FORWARD_ACCEL
  LOAD A NULL
  LOAD E LAST_VEC_ELEMENT

  LSRI SHIP_ANGLE SHIP_ANGLE 10

  ADDI SHIP_ANGLE SHIP_ANGLE 80
  #Y add
  MULCOS 8 SHIP_ANGLE FORWARD_ACCEL
  LSLI 8 8 20
  VECADD A A 8

  #X add
  ADDI SHIP_ANGLE SHIP_ANGLE 40
  MULCOS 8 SHIP_ANGLE FORWARD_ACCEL
  LSLI 8 8 30
  VECADD A A 8

  #Visual turning
  LOAD E VISUAL_MAX
  ADD 2 2 E
  
  VECADD 1 1 A
  BRA TESTUP
GOUP:
  LOAD B SHIP_ANGLE
  LOAD C FORWARD_ACCEL
  LOAD A NULL
  LOAD E LAST_VEC_ELEMENT
  #ALIAS A FINAL_VEC

  LSRI SHIP_ANGLE SHIP_ANGLE 10


  ADDI SHIP_ANGLE SHIP_ANGLE 80
  #Y add
  ADDI SHIP_ANGLE SHIP_ANGLE 40
  MULCOS 8 SHIP_ANGLE FORWARD_ACCEL
  LSLI 8 8 20
  VECADD A A 8

  #X add
  ADDI SHIP_ANGLE SHIP_ANGLE 40
  MULCOS 8 SHIP_ANGLE FORWARD_ACCEL
  LSLI 8 8 30
  VECADD A A 8
  
  VECADD 1 1 A
  BRA TESTRIGHT
TURN_LEFT:
  ADD 7 7 8

  #Make sure overflow doesn't gause weird issues
  LOAD E ANGLE_MASK
  AND 7 7 E

  BRA TEST_TURN_RIGHT
TURN_RIGHT:
  SUB 7 7 8
  
  #Make sure overflow doesn't gause weird issues
  LOAD E ANGLE_MASK
  AND 7 7 E

  BRA MOVED

UPDATE_VISUAL:
  LOAD A VISUAL_ANGLE
  LOAD B VISUAL_TARGET
  LOAD C VISUAL_ADD

  IF VISUAL_ANGLE <= VISUAL_TARGET
    ADD VISUAL_ANGLE VISUAL_ANGLE VISUAL_ADD
  ENDIF
  IF VISUAL_ANGLE >= VISUAL_TARGET
    SUB VISUAL_ANGLE VISUAL_ANGLE VISUAL_ADD
  ENDIF

  #Save the resulting angle
  STORE VISUAL_ANGLE VISUAL_ANGLE
  BRA  DONE_UPDATE_VISUAL

SHOOT:
  #Set the position  of the shot
  LOAD 0 SHIP_REAL_POS 
  LOAD 1 SHIP_ANGLE

  LOAD 2 TIMER
  LOAD 3 LAST_SHOT

  #ADD 4 LAST_SHOT RELOAD_TIME

  IF TIMER >= LAST_SHOT
    STOREOBJ SHIP_REAL_POS 4
    STOREOBJ SHIP_ANGLE 5
    
    LOAD 4 RELOAD_TIME

    ADD LAST_SHOT LAST_SHOT RELOAD_TIME
    STORE LAST_SHOT LAST_SHOT

    LOAD 0 SHOT_LIFE
    ADD 4 TIMER SHOT_LIFE
    STORE 4 SHOT_TIME
  ENDIF

  BRA HAS_SHOT

UPDATE_SHOT:
  LOAD 0 TIMER
  LOAD 1 SHOT_TIME
  LOAD 2 NULL

  IF TIMER >= SHOT_TIME
    STOREOBJ NULL 4
    STOREOBJ NULL 5
  ENDIF
  BRA SHOT_UPDATE_DONE

