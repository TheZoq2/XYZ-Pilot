NOP

RESTART:
IS_GAME_OVER = 0
NULL = 0000000000000000
MANYF = FFFFFFFFFFFFFFFF

#AND with a vector to remove all but the last element
LAST_VEC_ELEMENT = FFFF

ARRAYSTART = 0000000000000100
#ARRAYSIZE = 0 => 1 ASTEROID IN ARRAY, ARRAYSIZE = 1 => 2 ASTEROIDS IN ARRAY AND SO ON..
ARRAYSIZE = 2
OFFSET = 8


ASTEROID_START = 7A

SHIPPOS = 25001f0000000000
SHIPVEL = 0000000000000000
SHIP_REAL_POS = 0

FORWARD_ACCEL = 2

VISUAL_ADD = 0000000000000004
VISUAL_MAX = 0000000000000020
VISUAL_TARGET = 0
VISUAL_ANGLE = 0

SHIP_ANGLE = 0000000000000000
TURN_SPEED = 0000000000030000
ANGLE_MASK = 0000000000FF0000

SLOW_TURN_ADD = 0002000000020000
SLOW_TURN = 0000000000000000

TIMER = 0
LAST_SHOT = 0
RELOAD_TIME = 10
SHOT_TIME = 0
SHOT_LIFE = 5

#Shot  stuff
SHOT_AMOUNT = 9
SHOT_OFFSET = 20
SHOT_ARRAY_START = 300
#Modify the model memory
LINE_START = 1FC
LOAD 0 LINE_START
STOREOBJ 0 7

ITER:
  # ------------ UPDATING SHIP ------------
  LOAD 0 SHIPPOS
  LOAD 1 SHIPVEL

  LOAD 2 NULL

  LOAD 7 SHIP_ANGLE
  LOAD 3 TURN_SPEED

  TESTLEFT:
    BTST F 5
    BEQ GOLEFT
  TESTUP:
    BTST F 6
    BEQ GOUP
  TESTRIGHT:
    BTST F 3
    BEQ GORIGHT
  
  TEST_TURN_LEFT:
    BTST F 0
    BEQ TURN_LEFT
  TEST_TURN_RIGHT:
    BTST F 1
    BEQ TURN_RIGHT
  
  MOVED:

  STORE 2 VISUAL_TARGET

  BRA UPDATE_VISUAL
  DONE_UPDATE_VISUAL:
  LOAD 2 VISUAL_ANGLE
  LOAD C LAST_VEC_ELEMENT
  AND VISUAL_ANGLE VISUAL_ANGLE LAST_VEC_ELEMENT
  LSLI VISUAL_ANGLE VISUAL_ANGLE 30

  #Update ship position and angle
  #Add the velocity of the ship
  ADD 0 0 1
  STORE 0 SHIPPOS
  STORE 1 SHIPVEL
  STORE 7 SHIP_ANGLE
  #Rotate the ship
  VECADD SHIP_ANGLE VISUAL_ANGLE SHIP_ANGLE
  STOREOBJ SHIP_ANGLE 1

  #Divide the actual position to get the visual position
  LOAD C LAST_VEC_ELEMENT
  LOAD 8 NULL
  ALIAS 8 FINAL_POS

  #Shift 48 bits
  LSRI 9 SHIPPOS 30
  AND 9 9 LAST_VEC_ELEMENT
  #Divide speed by 8
  LSRI 9 9 6
  #Shift back 48 bits
  LSLI 9 9 30 
  VECADD FINAL_POS FINAL_POS 9

  #Shift 32 bits
  LSRI 9 SHIPPOS 20
  AND 9 9 LAST_VEC_ELEMENT
  #Divide speed by 8
  LSRI 9 9 6
  #Shift back 32 bits
  LSLI 9 9 20 
  VECADD FINAL_POS FINAL_POS 9

  #Update the visual position
  STOREOBJ FINAL_POS 0
  STORE FINAL_POS SHIP_REAL_POS

  #Do shooting stuff
  BTST F 2
  BEQ SHOOT
  HAS_SHOT:

  BRA UPDATE_SHOT
  SHOT_UPDATE_DONE:

  #End of shooting stuff
  
  BRA UPDATE_ASTEROIDS
  DONE_UPDATE_ASTEROIDS:
  
  WAITFRAME
  
  MOVLO 1 1
  MOVHI 1 0
  IF IS_GAME_OVER == 1
    #BRA GAME_OVER
  ENDIF

  LOAD 0 TIMER
  ADDI TIMER TIMER 1
  STORE TIMER TIMER

  BRA ITER

#Movement 'subroutines'
GORIGHT:
  LOAD B SHIP_ANGLE
  LOAD C FORWARD_ACCEL
  LOAD A NULL
  LOAD E LAST_VEC_ELEMENT

  LSRI SHIP_ANGLE SHIP_ANGLE 10

  ADDI SHIP_ANGLE SHIP_ANGLE 80
  #Y add
  MULCOS 8 SHIP_ANGLE FORWARD_ACCEL
  LSLI 8 8 20
  VECADD A A 8

  #X add
  ADDI SHIP_ANGLE SHIP_ANGLE 40
  MULCOS 8 SHIP_ANGLE FORWARD_ACCEL
  LSLI 8 8 30
  VECADD A A 8

  #Visual turning
  LOAD E VISUAL_MAX
  SUB 2 2 E
  
  VECSUB 1 1 A
  BRA TEST_TURN_LEFT
GOLEFT:
  LOAD B SHIP_ANGLE
  LOAD C FORWARD_ACCEL
  LOAD A NULL
  LOAD E LAST_VEC_ELEMENT

  LSRI SHIP_ANGLE SHIP_ANGLE 10

  ADDI SHIP_ANGLE SHIP_ANGLE 80
  #Y add
  MULCOS 8 SHIP_ANGLE FORWARD_ACCEL
  LSLI 8 8 20
  VECADD A A 8

  #X add
  ADDI SHIP_ANGLE SHIP_ANGLE 40
  MULCOS 8 SHIP_ANGLE FORWARD_ACCEL
  LSLI 8 8 30
  VECADD A A 8

  #Visual turning
  LOAD E VISUAL_MAX
  ADD 2 2 E
  
  VECADD 1 1 A
  BRA TESTUP
GOUP:
  LOAD B SHIP_ANGLE
  LOAD C FORWARD_ACCEL
  LOAD A NULL
  LOAD E LAST_VEC_ELEMENT
  #ALIAS A FINAL_VEC

  LSRI SHIP_ANGLE SHIP_ANGLE 10


  ADDI SHIP_ANGLE SHIP_ANGLE 80
  #Y add
  ADDI SHIP_ANGLE SHIP_ANGLE 40
  MULCOS 8 SHIP_ANGLE FORWARD_ACCEL
  LSLI 8 8 20
  VECADD A A 8

  #X add
  ADDI SHIP_ANGLE SHIP_ANGLE 40
  MULCOS 8 SHIP_ANGLE FORWARD_ACCEL
  LSLI 8 8 30
  VECADD A A 8
  
  VECADD 1 1 A
  BRA TESTRIGHT
TURN_LEFT:
  ADD 7 7 3

  #Make sure overflow doesn't cause weird issues
  LOAD E ANGLE_MASK
  AND 7 7 E

  BRA TEST_TURN_RIGHT
TURN_RIGHT:
  SUB 7 7 3
  
  #Make sure overflow doesn't gause weird issues
  LOAD E ANGLE_MASK
  AND 7 7 E

  BRA MOVED

UPDATE_VISUAL:
  LOAD A VISUAL_ANGLE
  LOAD B VISUAL_TARGET
  LOAD C VISUAL_ADD

  IF VISUAL_ANGLE <= VISUAL_TARGET
    ADD VISUAL_ANGLE VISUAL_ANGLE VISUAL_ADD
  ENDIF
  IF VISUAL_ANGLE >= VISUAL_TARGET
    SUB VISUAL_ANGLE VISUAL_ANGLE VISUAL_ADD
  ENDIF

  #Save the resulting angle
  STORE VISUAL_ANGLE VISUAL_ANGLE
  BRA  DONE_UPDATE_VISUAL

SHOOT:
  #Set the position  of the shot
  LOAD 0 SHIP_REAL_POS 
  LOAD 1 SHIP_ANGLE

  LOAD 2 TIMER
  LOAD 3 LAST_SHOT

  #ADD 4 LAST_SHOT RELOAD_TIME

  IF TIMER >= LAST_SHOT
    STOREOBJ SHIP_REAL_POS 4
    STOREOBJ SHIP_ANGLE 5
    
    LOAD 4 RELOAD_TIME

    ADD LAST_SHOT LAST_SHOT RELOAD_TIME
    STORE LAST_SHOT LAST_SHOT

    LOAD 0 SHOT_LIFE
    ADD 4 TIMER SHOT_LIFE
    STORE 4 SHOT_TIME
  ENDIF

  BRA HAS_SHOT

UPDATE_SHOT:
  LOAD 0 TIMER
  LOAD 1 SHOT_TIME
  LOAD 2 NULL

  #Reset the shot
  IF TIMER >= SHOT_TIME
    STOREOBJ NULL 4
    STOREOBJ NULL 5
    #Don't do collision check
    BRA SHOT_UPDATE_DONE
  ENDIF

  UNIT_VEC = 0001000000000000
  HIT_THRESHOLD = 80
  LOAD 9 UNIT_VEC

  LOAD 4 SHIP_REAL_POS
  LOAD 8 SHIP_ANGLE


  LOAD 0 NULL
  ALIAS 0 i
  LOAD 1 ARRAYSIZE
  LOAD 2 ARRAYSTART
  ALIAS 2 CURRENT_AST
  WHILE i <= ARRAYSIZE
    LOAD.R 3 CURRENT_AST 0
    ALIAS 3 AST_POS

    #Difference between the asteroid and the ship
    VECSUB 5 SHIP_REAL_POS AST_POS
    ALIAS 5 SHIP_DIFF

    #Calculating the length of the vector to the ship
    LEN 6 SHIP_DIFF
    ALIAS 6 SHIP_DISTANCE

    ADDI SHIP_ANGLE SHIP_ANGLE 10
    MULCOS 7 SHIP_ANGLE SHIP_DISTANCE
    ALIAS 7 COS_VALUE
    
    DOT 9 UNIT_VEC SHIP_DISTANCE
    ALIAS 9 DOT_VALUE

    #Subtract the 'angles' and remove the cos value
    SUB DOT_VALUE DOT_VALUE COS_VALUE
    LEN DOT_VALUE DOT_VALUE
    
    IF COS_VALUE >= DOT_VALUE
      LOAD B NULL
      MOVHI B 002000f0
      STORE.R B CURRENT_AST 0
    ENDIF

    #Go to the next asteroid
    ADDI CURRENT_AST CURRENT_AST 6
    ADDI i i 1 
  ENDWHILE

  BRA SHOT_UPDATE_DONE

UPDATE_ASTEROIDS:
  # ------------ UPDATING ASTEROIDS ------------
  ##Adding testinfo
  LOAD 3 ARRAYSTART
  MOVHI 0 00000000
  MOVLO 0 0
  STORE.R 0 ARRAYSTART 1
  STORE.R 0 ARRAYSTART 3
  MOVHI 0 00000001
  STORE.R 0 ARRAYSTART 7
  LOAD 0 ASTEROID_START
  STORE.R ASTEROID_START ARRAYSTART 4
  #MOVHI 0 00060000
  STORE.R 0 ARRAYSTART 17

  i = 0
  LOAD 0 i
  LOAD 1 ARRAYSIZE
  LOAD 2 OFFSET
  LOAD 3 ARRAYSTART
  WHILE i <= ARRAYSIZE
	#Update position
    LOAD.R 4 ARRAYSTART 0
    ALIAS 4 POS
    LOAD.R 5 ARRAYSTART 1
    ALIAS 5 VEL
    VECADD POS POS VEL
    STORE.R POS ARRAYSTART 0
    STOREOBJ.R POS OFFSET 0
    
    #Update rotation
    LOAD.R 4 ARRAYSTART 2
    ALIAS 4 ROT
    LOAD.R 5 ARRAYSTART 3
    ALIAS 5 ROTVEL
    VECADD ROT ROT ROTVEL
    STORE.R ROT ARRAYSTART 2
    STOREOBJ.R ROT OFFSET 1
    
    #Scale is never used
    STOREOBJ.R NULL OFFSET 2

    #Give the asteroid a model
    LOAD.R 4 ARRAYSTART 4
    ALIAS 4 MODEL
    STOREOBJ.R MODEL OFFSET 3

    #Collision detection
    LOAD 4 SHIP_REAL_POS
    LOAD.R 5 ARRAYSTART 0
    ALIAS 5 ASTEROID_POS
    VECSUB 5 ASTEROID_POS SHIP_REAL_POS
    ALIAS 5 RELVECTOR
    LEN 5 RELVECTOR
    ALIAS 5 DISTANCE

    LOAD.R 6 ARRAYSTART 5
    ALIAS 6 RADIX

    LOAD SHIP_REAL_POS 4
    LEN 5 4
    
    MOVLO 6 10
    MOVHI 6 0

    IF 5 <= 6
      LOAD 7 IS_GAME_OVER
      MOVLO IS_GAME_OVER 1
      STORE 7 IS_GAME_OVER
    ENDIF
    
    
    ADDI ARRAYSTART ARRAYSTART 6
    ADDI OFFSET OFFSET 4
    ADDI i i 1
  ENDWHILE

  BRA DONE_UPDATE_ASTEROIDS

GAME_OVER:
  # GAME OVER!
  BRA RESTART
