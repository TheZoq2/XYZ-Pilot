[OP 8 bit][REG1 4 bit][REG2 4 bit][REG3 4 bit][DATA 32 bit][12 BIT CRAP]

REGISTER FILE 2^4=16 adresses storing 64 bit values
DATA MEMORY 2^10=1024 adresses storing 64 bit values

NOP = [00][-][-][-][-][-]
BRA DATA (PC+1:=DATA) = [01][-][-]-][DATA][-]
BNE DATA (PC+1:=DATA, WHEN Z = 0) = [02][-][-]-][DATA][-]
ADD REG1,REG2,REG3 (REG1=REG2+REG3) = [03][REG1][REG2][REG3][-][-]
ADDI REG1,REG2,DATA (REG1=REG2+DATA) = [04][REG1][REG2][-][DATA][-]
MOVHI REG1, DATA (REG1-HIGH=DATA) = [05][REG1][-][-][DATA][-]
MOVLO REG1, DATA (REG1-LOW=DATA) = [06][REG1][-][-][DATA][-]
STORE REG1, DATA (DATAMEM(DATA)=REG1) = [07][REG1][-][-][DATA][-]
LOAD REG1, DATA (REG1=DATAMEM(DATA)) = [08][REG1][-][-][DATA][-]
SUB REG1,REG2,REG3 (REG1=REG2-REG3) = [09][REG1][REG2][REG3][-][-]
SUBI REG1,REG2,DATA (REG1=REG2-DATA) = [0A][REG1][REG2][-][DATA][-]
CMP REG1,REG2 (REG1==REG2 => Z=1, REG2>REG1 => N=1) = [0B][REG1][REG2][-][-][-]
MULT REG1,REG2,REG3(REG1=REG2*REG3) = [0C][REG1][REG2][REG3][-][-]
MULTI REG1,REG2,DATA(REG1=REG2*DATA) = [0D][REG1][-][-][DATA][-]
VECADD REG1,REG2,REG3(REG1=REG2+REG3(vectors)) = [0E][REG1][REG2][REG3][-][-]
VECSUB REG1,REG2,REG3(REG1=REG2-REG3(vectors)) = [0F][REG1][REG2][REG3][-][-]
BEQ DATA (PC+1:=DATA, WHEN Z = 1) = [10][-][-]-][DATA][-]
BGE DATA (PC+1:=DATA, WHEN N = 1) = [11][-][-]-][DATA][-]
BLE DATA (PC+1:=DATA, WHEN N = 0, Z = 0) = [12][-][-]-][DATA][-]
STOREOBJ (OBJ[DATA]=REG1) = [13][REG1][-][-][DATA][-]
WAITFRAME (Wait for frame to be done) [14][-][-][-][-][-]
BTST REG1 DATA (REG1(DATA) == 1 => Z=1, ELSE Z=0) = [15][REG1][-][-][DATA][-]
LOAD.R REG1,REG2,DATA (REG1=DATAMEM(DATA+REG2)) = [16][REG1][REG2][-][DATA][-]
STORE.R REG1,REG2,DATA (DATAMEM(DATA+REG2)=REG1) = [17][REG1][REG2][-][DATA][-]
AND REG1,REG2,REG3 (REG1= REG2 AND REG3) = [18][REG1][REG2][REG3][-][-]
LSLI REG1,REG2,DATA (REG1= REG2 << DATA) = [19][REG1][REG2][-][DATA][-]
LSRI REG1,REG2,DATA (REG1= REG2 >> DATA) = [1A][REG1][REG2][-][DATA][-]
RANDOM REG1 (REG1=RANDOM()) = [1F][REG1][-][-][-]
